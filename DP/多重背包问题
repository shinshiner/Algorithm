/*
【多重背包】
有N种物品和一个容量为V的背包。
第i种物品最多有n件可用，每件体积是w，价值是v。
求解将哪些物品装入背包可使这些物品的体积总和不超过背包容量，且价值总和最大。
这题目和01背包问题很类似。基本的方程只需将01背包问题的方程略微一改即可。
因为对于第i种物品有n+1种策略：取0件，取1件……取n件。
因此可以将第i种物品视为n个相同的物品，加入物品相关的数组中，然后用01背包的方程解决。
这种方法的复杂度是O(V*∑n），数据一大就会超时。

下面我们用另外一种方法解决——二进制拆分。
将第i种物品分成若干件物品，其中每件物品有一个系数，
这件物品的费用和价值均是原来的费用和价值乘以这个系数。
使这些系数分别为 1,2,4,...,2^(k-1),n-2^k+1，且k是满足n-2^k+1>0的最大整数。
例如，如果n为13，就将这种物品分成系数分别为1,2,4,6的四件物品。
分成的这几件物品的系数和为n，表明不可能取多于n件的第i种物品。
另外这种方法也能保证对于0..n间的每一个整数，均可以用若干个系数的和表示。
这样就将第i种物品分成了O(log n）种物品，将原问题转化为了复杂度为O(V*∑log n）的01背包问题，是很大的改进。

当然，这种问题可以用单调队列进行进一步优化

下面以sjtu_OJ 3024为例，贴一段代码
*/

#include <iostream>
#include <cstdio>

using namespace std;

int c[1000000], v[1000000], a[1000000];

int main()
{
    int n, m, signum, i, allnum=0, j, tmp, tmp1, tmp2, tmp3, first, lef;
    bool b[11];

    scanf("%d%d",&n,&m);
    for(i=0;i<n;++i){       //二进制拆分（写得可能有点丑）
        scanf("%d",&signum);
        scanf("%d%d",&tmp2,&tmp3);

        first = 0;
        tmp1 = signum;
        for(j=0;j<=10;++j){
            tmp = (1<<j);
            if(tmp1>=tmp){tmp1 -= tmp; b[j] = 1; first += tmp;}
            else b[j] = 0;
        }
        lef = signum - first;
        for(j=0;j<10;++j)
            if(b[j]!=0){
                v[allnum] = tmp2 * (1<<j);
                c[allnum] = tmp3 * (1<<j);
                ++allnum;
            }
        v[allnum] = tmp2 * lef;
        c[allnum] = tmp3 * lef;
        ++allnum;
    }

    //下面是01背包的解法
    for(i=0;i<=m;++i) a[i] = 0;

    for(i=0;i<allnum;++i)
        for(j=m;j>=v[i];--j)
            a[j] = max(a[j],a[j-v[i]]+c[i]);

    printf("%d",a[m]);

    return 0;
}
